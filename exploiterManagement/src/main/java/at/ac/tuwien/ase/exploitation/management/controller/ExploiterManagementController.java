package at.ac.tuwien.ase.exploitation.management.controller;

import at.ac.tuwien.ase.exploitation.management.dto.APICallDto;
import at.ac.tuwien.ase.exploitation.management.dto.APICreditDepositDto;
import at.ac.tuwien.ase.exploitation.management.dto.ExploiterDto;
import at.ac.tuwien.ase.exploitation.management.dto.RegisterUserDto;
import at.ac.tuwien.ase.exploitation.management.model.APICreditDeposit;
import at.ac.tuwien.ase.exploitation.management.service.APICallService;
import at.ac.tuwien.ase.exploitation.management.service.APICreditService;
import at.ac.tuwien.ase.exploitation.management.service.ExploiterManagementService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import java.util.List;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/exploiter")
@Api(value = "Endpoint to manage exploiters", description = "Endpoint to manage exploiters")
public class ExploiterManagementController {

  private static final Logger logger = LoggerFactory.getLogger(ExploiterManagementController.class);

  private final ExploiterManagementService exploiterManagementService;
  private final APICreditService apiCreditService;
  private final APICallService apiCallService;

  @Autowired
  public ExploiterManagementController(ExploiterManagementService exploiterManagementService,
      APICreditService apiCreditService,
      APICallService apiCallService) {
    this.exploiterManagementService = exploiterManagementService;
    this.apiCallService = apiCallService;
    this.apiCreditService = apiCreditService;
  }

  @PostMapping(value = "", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(value = "Registers a new exploiter with the given information.")
  public ExploiterDto registerExploiter(@RequestBody RegisterUserDto registerUserDto) {
    logger.info("Register a new exploiter (name={}).", registerUserDto.getName());
    return new ExploiterDto(exploiterManagementService
        .registerExploiter(registerUserDto.getName(), registerUserDto.getPassword(),
            registerUserDto.getEmail()));
  }

  @GetMapping(value = "{username}/credits", produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(value = "Gets total number of credits for the given exploiter.")
  public Long getAPICreditsOfExploiter(
      @ApiParam(value = "The username of the exploiter.") @PathVariable String username) {
    return exploiterManagementService.getCredits(username);
  }

  @GetMapping(value = "{username}/afford/cost/{cost}", produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(value = "Checks whether the use can afford the given cost.")
  public Boolean getAPICreditsOfExploiter(
      @ApiParam(value = "The username of the exploiter.") @PathVariable String username,
      @ApiParam(value = "Cost in form of API Credits.") @PathVariable Long cost) {
    return exploiterManagementService.canAfford(username, cost);
  }

  @PostMapping(value = "{username}/call", produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(value = "Registers a method call for the given user.")
  public void registerCallingOfMethodForExploiter(@RequestBody APICallDto apiCallDto) {
    apiCallService.registerAPICallForExploiter(apiCallDto);
  }

  @GetMapping(value = "{username}/credit/deposits", produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(value = "Get the registered credit deposits of given user.")
  public List<APICreditDepositDto> getAPICreditDepositsOfExploiter(
      @ApiParam(value = "The username of the exploiter.") @PathVariable String username) {
    return apiCreditService.getAPICreditDepositsOf(username).stream()
        .map(APICreditDepositDto::new).collect(Collectors.toList());
  }

}
