package at.ac.tuwien.ase.exploitation.management.service;

import at.ac.tuwien.ase.exploitation.management.dto.APICreditDepositEventDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.cloud.pubsub.v1.AckReplyConsumer;
import com.google.cloud.pubsub.v1.MessageReceiver;
import com.google.pubsub.v1.PubsubMessage;
import com.google.pubsub.v1.Subscription;
import java.util.Optional;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gcp.pubsub.PubSubAdmin;
import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;
import org.springframework.stereotype.Service;

/**
 * This class listens to Ethereum smart contract events that were pushed in the corresponding
 * topic.
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Service
public class APICreditDepositListener {

  private static final Logger logger = LoggerFactory.getLogger(APICreditDepositListener.class);

  @Value("${pubsub.topic.apicredits}")
  private String apiCreditsTopicName;
  @Value("${pubsub.unique.name}")
  private String subscriptionPrefix;

  private PubSubAdmin pubSubAdmin;
  private PubSubTemplate pubSubTemplate;
  private ObjectMapper objectMapper;

  private APICreditService apiCreditService;

  @Autowired
  public APICreditDepositListener(APICreditService apiCreditService, PubSubAdmin pubSubAdmin,
      PubSubTemplate pubSubTemplate,
      ObjectMapper objectMapper) {
    this.apiCreditService = apiCreditService;
    this.pubSubAdmin = pubSubAdmin;
    this.pubSubTemplate = pubSubTemplate;
    this.objectMapper = objectMapper;
  }

  @PostConstruct
  public void setUp() {
    String depositSubscriptionName = this.subscriptionPrefix + "-" + this.apiCreditsTopicName;
    Optional<Subscription> depositTopicOptional = this.pubSubAdmin.listSubscriptions().stream()
        .filter(sub -> {
          String[] split = sub.getName().split("/");
          return split[split.length - 1].equals(depositSubscriptionName);
        }).findFirst();
    if (!depositTopicOptional.isPresent()) {
      this.pubSubAdmin.createSubscription(depositSubscriptionName, this.apiCreditsTopicName);
    }
    this.pubSubTemplate
        .subscribe(this.subscriptionPrefix + "-" + this.apiCreditsTopicName, new MessageReceiver() {
          @Override
          public void receiveMessage(PubsubMessage pubsubMessage,
              AckReplyConsumer ackReplyConsumer) {
            try {
              APICreditDepositEventDto depositEventDto = objectMapper
                  .readValue(pubsubMessage.getData().toStringUtf8(),
                      APICreditDepositEventDto.class);
              apiCreditService.storeAPICreditDeposit(depositEventDto);
            } catch (Exception e) {
              logger.error("Reading the message '{}' failed, with cause '{}'.",
                  pubsubMessage.getData().toStringUtf8(), e.getMessage());
            }
            ackReplyConsumer.ack();
          }
        });
  }

  @PreDestroy
  public void tearDown() {

  }

}
