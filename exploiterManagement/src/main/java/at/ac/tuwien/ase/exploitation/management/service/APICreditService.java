package at.ac.tuwien.ase.exploitation.management.service;

import at.ac.tuwien.ase.exploitation.management.dto.APICreditDepositEventDto;
import at.ac.tuwien.ase.exploitation.management.model.APICreditDeposit;
import at.ac.tuwien.ase.exploitation.management.model.Exploiter;
import at.ac.tuwien.ase.exploitation.management.persistence.APICreditDepositRepository;
import at.ac.tuwien.ase.exploitation.management.persistence.ExploiterManagementRepository;
import at.ac.tuwien.ase.exploitation.management.service.exception.ExploiterNotFoundException;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Service
public class APICreditService {

  private static final Logger logger = LoggerFactory.getLogger(APICallService.class);

  private APICreditDepositRepository apiCreditDepositRepository;
  private ExploiterManagementRepository exploiterManagementRepository;

  @Autowired
  public APICreditService(APICreditDepositRepository apiCreditDepositRepository,
      ExploiterManagementRepository exploiterManagementRepository) {
    this.apiCreditDepositRepository = apiCreditDepositRepository;
    this.exploiterManagementRepository = exploiterManagementRepository;
  }

  @Transactional(isolation = Isolation.SERIALIZABLE, propagation = Propagation.REQUIRES_NEW)
  public void storeAPICreditDeposit(APICreditDepositEventDto apiCreditDepositEventDto) {
    APICreditDeposit apiCreditDeposit = new APICreditDeposit();
    Exploiter exploiter = exploiterManagementRepository
        .findFirstByUsername(apiCreditDepositEventDto.getUid());
    if (exploiter != null) {
      logger.info("Stores the api credit deposit {}.", apiCreditDepositEventDto);
      apiCreditDeposit.setExploiter(exploiter);
      apiCreditDeposit.setPaymentAddress(apiCreditDepositEventDto.getSenderAddress());
      apiCreditDeposit.setTimestamp(apiCreditDepositEventDto.getTimestamp());
      apiCreditDeposit.setValue(apiCreditDepositEventDto.getAmount());
      apiCreditDepositRepository.save(apiCreditDeposit);
      exploiter.addCredit(apiCreditDepositEventDto.getAmount());
    } else {
      throw new ExploiterNotFoundException(String
          .format("The exploiter with the given username '%s' was not found.",
              apiCreditDepositEventDto.getUid()));
    }
  }

  public List<APICreditDeposit> getAPICreditDepositsOf(String username) {
    if (username == null || username.isEmpty()) {
      throw new IllegalArgumentException("The username must be given, and not null or empty.");
    }
    return apiCreditDepositRepository.findAllByExploiter_Username(username);
  }
}
