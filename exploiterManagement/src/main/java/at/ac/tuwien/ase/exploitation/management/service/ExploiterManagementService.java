package at.ac.tuwien.ase.exploitation.management.service;

import at.ac.tuwien.ase.exploitation.management.model.Exploiter;
import at.ac.tuwien.ase.exploitation.management.persistence.ExploiterManagementRepository;
import at.ac.tuwien.ase.exploitation.management.service.exception.ExploiterNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * This service manages
 *
 * @author Kevin Haller
 * @version 1.0
 * @since 1.0
 */
@Service
public class ExploiterManagementService {

  private ExploiterManagementRepository exploiterManagementRepository;

  @Autowired
  public ExploiterManagementService(ExploiterManagementRepository exploiterManagementRepository) {
    this.exploiterManagementRepository = exploiterManagementRepository;
  }

  /**
   * Registers an exploiter with the given {@code name} and {@code password}. The name is not import
   * for this system, and is only used for governance purposes.
   *
   * @param name of the newly created exploiter instance.
   * @param password of the exploiter instance.
   * @param email that shall be registered to the name.
   * @return the newly created {@link Exploiter} instance.
   * @throws IllegalArgumentException if the given name is non-empty, and as well as if the password
   * is too weak (less than 8 characters).
   */
  public Exploiter registerExploiter(String name, String password, String email) {
    if ((name == null || name.isEmpty())) {
      throw new IllegalArgumentException("The given name must not be null or empty.");
    }
    if ((password == null || password.length() < 8)) {
      throw new IllegalArgumentException(
          "The length of the given password must not be below eight characters.");
    }
    Exploiter exploiter = new Exploiter();
    exploiter.setName(name);
    exploiter.setPassword(password);
    exploiter.setCredit(0L);
    exploiter.setEmail(email);
    return exploiterManagementRepository.save(exploiter);
  }

  /**
   * Gets the credits of the {@link Exploiter} with the given username.
   *
   * @param username for which the credits shall be returned.
   * @return the credits of the {@link Exploiter} with the given id.
   * @throws ExploiterNotFoundException if no {@link Exploiter} with the given username exists.
   */
  public long getCredits(String username) throws ExploiterNotFoundException {
    Exploiter exploiter = exploiterManagementRepository.findFirstByUsername(username);
    if (exploiter == null) {
      throw new ExploiterNotFoundException(
          String.format("No exploiter with the username '%s' found.", username));
    } else {
      return exploiter.getCredit();
    }
  }

  /**
   * Checks whether the exploiter with the given username can effort the given cost.
   *
   * @param username for which the liquidity shall be checked.
   * @param cost that must be paid by the given username.
   * @return {@code true}, if the exploiter can pay the cost, otherwise {@code false}.
   * @throws ExploiterNotFoundException if no {@link Exploiter} with the given username exists.
   */
  public boolean canAfford(String username, Long cost) throws ExploiterNotFoundException {
    Exploiter exploiter = exploiterManagementRepository.findFirstByUsername(username);
    if (exploiter == null) {
      throw new ExploiterNotFoundException(
          String.format("No exploiter with the username '%s' found.", username));
    } else {
      return exploiter.getCredit() >= cost;
    }
  }

}
